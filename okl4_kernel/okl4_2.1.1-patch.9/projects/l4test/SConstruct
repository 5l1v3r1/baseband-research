#
# Copyright (c) 2007 Open Kernel Labs, Inc. (Copyright Holder).
# All rights reserved.
# 
# 1. Redistribution and use of OKL4 (Software) in source and binary
# forms, with or without modification, are permitted provided that the
# following conditions are met:
# 
#     (a) Redistributions of source code must retain this clause 1
#         (including paragraphs (a), (b) and (c)), clause 2 and clause 3
#         (Licence Terms) and the above copyright notice.
# 
#     (b) Redistributions in binary form must reproduce the above
#         copyright notice and the Licence Terms in the documentation and/or
#         other materials provided with the distribution.
# 
#     (c) Redistributions in any form must be accompanied by information on
#         how to obtain complete source code for:
#        (i) the Software; and
#        (ii) all accompanying software that uses (or is intended to
#        use) the Software whether directly or indirectly.  Such source
#        code must:
#        (iii) either be included in the distribution or be available
#        for no more than the cost of distribution plus a nominal fee;
#        and
#        (iv) be licensed by each relevant holder of copyright under
#        either the Licence Terms (with an appropriate copyright notice)
#        or the terms of a licence which is approved by the Open Source
#        Initative.  For an executable file, "complete source code"
#        means the source code for all modules it contains and includes
#        associated build and other files reasonably required to produce
#        the executable.
# 
# 2. THIS SOFTWARE IS PROVIDED ``AS IS'' AND, TO THE EXTENT PERMITTED BY
# LAW, ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE, OR NON-INFRINGEMENT, ARE DISCLAIMED.  WHERE ANY WARRANTY IS
# IMPLIED AND IS PREVENTED BY LAW FROM BEING DISCLAIMED THEN TO THE
# EXTENT PERMISSIBLE BY LAW: (A) THE WARRANTY IS READ DOWN IN FAVOUR OF
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT) AND (B) ANY LIMITATIONS PERMITTED BY LAW (INCLUDING AS TO
# THE EXTENT OF THE WARRANTY AND THE REMEDIES AVAILABLE IN THE EVENT OF
# BREACH) ARE DEEMED PART OF THIS LICENCE IN A FORM MOST FAVOURABLE TO
# THE COPYRIGHT HOLDER (AND, IN THE CASE OF A PARTICIPANT, THAT
# PARTICIPANT). IN THE LICENCE TERMS, "PARTICIPANT" INCLUDES EVERY
# PERSON WHO HAS CONTRIBUTED TO THE SOFTWARE OR WHO HAS BEEN INVOLVED IN
# THE DISTRIBUTION OR DISSEMINATION OF THE SOFTWARE.
# 
# 3. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ANY OTHER PARTICIPANT BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

from math import ceil, log

#############################################################################
## Setup build
#############################################################################
build = KengeBuild()
machine = build.machine

#############################################################################
## Global configuration options
#############################################################################

def process_global_config(build_env):
    default_max_threads = 1024

    max_threads = build_env.args.setdefault("MAX_THREADS", default_max_threads)

    if (max_threads < 16) or (max_threads > 32768):
        raise UserError, "MAX_THREADS of %d is out of range" % max_threads

    max_thread_bits = int(ceil(log(max_threads, 2)))

    build_env.Append(CPPDEFINES =[("CONFIG_MAX_THREAD_BITS", max_thread_bits)])

    if not build_env.args.get("ENABLE_DEBUG", True):
        build_env.scons_env.Append(CPPDEFINES = ["NDEBUG"])

    # Read in the scheduling behaviour
    sched_algorithm = build_env.args.setdefault("SCHEDULING_ALGORITHM", 'inheritance').lower()
    if (sched_algorithm == 'inheritance'):
        build_env.Append(CPPDEFINES = [("CONFIG_SCHEDULE_INHERITANCE", 1)])
    elif (sched_algorithm == 'strict'):
        build_env.Append(CPPDEFINES = [("CONFIG_STRICT_SCHEDULING", 1)])
    else:
        raise UserError, "'%s' is not a valid scheduling algorithm." \
              % sched_algorithm

    feature_profiles = ["NORMAL", "EXTRA"]
    feature_profile = get_option_arg("OKL4_FEATURE_PROFILE",
                                     machine.default_feature_profile, feature_profiles)
    build_env.feature_profile = feature_profile
    if feature_profile == "EXTRA":
        build_env.Append(CPPDEFINES=[("CONFIG_REMOTE_MEMORY_COPY", 1)])

#############################################################################
## Build L4
#############################################################################
kernel_env = build.KengeEnvironment("pistachio")

process_global_config(kernel_env)

kernel_env.Package("libs/compat")
kernel_env.Package("libs/atomic_ops")
kernel_env.Package("libs/l4")
if kernel_env.toolchain.type == "gnu":
    kernel_env.Package("libs/gcc")
l4kernel = kernel_env.Package("pistachio")

#############################################################################
## Build L4test
#############################################################################
rootserver_env = build.KengeEnvironment("l4_rootserver")

process_global_config(rootserver_env)

rootserver_env.Package("libs/compat")
if rootserver_env.toolchain.type == "gnu":
    rootserver_env.Package("libs/gcc")
if rootserver_env.toolchain.type == "rvct":
    rootserver_env.Package("libs/rvct", buildname="c")
else:
    rootserver_env.Package("libs/c")

rootserver_env.Package("libs/l4")
rootserver_env.Package("libs/l4e")

rootserver_env.Package("libs/check")
rootserver_env.Package("libs/l4test")
rootserver_env.Package("libs/mutex")
rootserver_env.Package("libs/atomic_ops")
rootserver_env.Package("libs/bootinfo")

rootserver_env.Append(CPPDEFINES=["THREAD_SAFE"])
l4test = rootserver_env.Package("l4test")

build.expect_test_data = [(["100%: Checks: \d+, Failures: 0, Errors: 0",
                            "\d+%: Checks: \d+, Failures: \d+, Errors: \d+",
                            "--- KD# .* ---"],
                           None)]

#############################################################################
## Memory Pools
#############################################################################

pools = rootserver_env.IguanaDefaultMemoryPools(l4test)

#############################################################################
## Build Bootimage
#############################################################################

elfweaver_env = build.KengeEnvironment("images")
if( machine.platform == "pc99" ):

    apps = elfweaver_env.LayoutVirtual([pools, l4kernel, l4test])
    spec = elfweaver_env.GenWeaverXML(apps)
    elf_image, sim_image, boot_image = elfweaver_env.CreateImages(spec, apps)
    boot_image = elfweaver_env.CreateFatImage([elf_image])

    build.TestImage(boot_image)
    build.RunImage(boot_image)
    Default(boot_image)

elif( getattr( machine, "macho", False) ):
    # We will have kernel and l4test binaries
    apps = [l4kernel, l4test]

    # Relocate the user-apps to fit
    apps = build.MachoLayoutVirtual( apps )
    
    # We need a boot image of the apps
    boot_image = build.CreateLegionImage( apps )
    
    # Set up
    build.TestImage(boot_image)
    build.RunImage(boot_image)
    
    # Building without weaver
    Default( boot_image )

else:
    # Standard 'weaver' building
    apps = elfweaver_env.LayoutVirtual([pools, l4kernel, l4test])
    spec = elfweaver_env.GenWeaverXML(apps)
    elf_image, sim_image, boot_image = elfweaver_env.CreateImages(spec, apps)
    run_method = get_option_arg('RUN', None)
    if (machine.__name__ == 'gumstix' and run_method == "hardware") or\
        machine.__name__ == 'gta01' or machine.__name__ == 'gta01_xip':
        build.TestImage(boot_image)
        build.RunImage(boot_image)
        Default(boot_image)
    elif machine.__name__ in ["versatile", "versatile_uboot"]:
        build.TestImage(boot_image)
        build.RunImage(boot_image)
        Default(boot_image)
    elif machine.__name__ == "kzm_arm11":
        build.expect_test_data = [('KZM_ARM11 #', 'cfsetenv bootfile regression/kzm_arm11'), ('KZM_ARM11 #', 'dhcp'), ('KZM_ARM11 #', 'go 0x80000000')] + build.expect_test_data
        build.TestImage(boot_image)
        build.RunImage(boot_image)
        Default(boot_image)
    else:
        build.TestImage(sim_image)
        build.RunImage(sim_image)
        build.CoverageImage(sim_image)
        Default(elf_image, sim_image, boot_image)
if machine.__name__ == 'gta01':
    build.expect_test_data = [('GTA01Bv4 #', 'bootelf 0x31000000')] + build.expect_test_data

